% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knitr4education.R
\name{find_min4error}
\alias{find_min4error}
\title{Funktion find_min4error(pError, pGrad, pa, px_D, py_D, alpha=1, evalcount=100)}
\usage{
find_min4error(pError, pGrad, pa, px_D, py_D, alpha = 1, evalcount = 100)
}
\arguments{
\item{pError}{Die Fehlerfunktion}

\item{pGrad}{Der (normierte) Gradient der Fehlerfunktion}

\item{pa}{Startwert der Fehlerfunktion, die negativer Gradientenrichtung verändert werden sol}

\item{px_D}{Ein Vektor mit den x-Werten als gegebene Eingabedaten einer Funktion}

\item{py_D}{Ein Vektor mit den y-Werten als gegebene Eingabedaten einer Funktion}

\item{alpha}{Lernschrittweite in Gradientenrichtung. Gib an, wie stark der Vektor a in Gradientenrichtung verändert werden kann.}

\item{evalcount}{gibt die Anzahl der Evaluierungen in Gradientenrichtung an, um den minimalen Wert der Fehlerfunktion zu finden.}
}
\value{
Vektor mit zwei reellen Zahlen, die 1. Zahl gibt die skalare Veränderung in Gradientenrichtung an. Die 2. Zahl der neue minimale Fehler
}
\description{
Die Funktion ist eine Hilfsfunktion für die Minimierung einer Fehlerfunktion. Die Funktion gibt
zwei Zahlenwerte in einem Vektor zurück, wobei
}
\examples{
a = c(1, 2, 3) ein Vektor oder A eine Matrix
# x_D ist in diesem Fall eine Dataframe mit 3 Spalten von Eingabedaten
# y_D ist in diesem Fall eine Dataframe mit einer Spalte von Ausgabedaten
# Schrittweite ist 1 und es werden 100 Evaluation in Gradientenrichtung für die Minimierung verwendet
# evalcount höher zu setzen verbessert die Optimierung, erhöht aber auch die Rechnenzeit
# da pro Optimierungsschritt mehr Evalulationen durchgeführt werden.
find_min4error(E_LR, Grad_LR, A , x_D, y_D, 1, 100)
}
